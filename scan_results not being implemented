import socket
import requests 
import threading
import dns.resolver
import csv
import os
from datetime import datetime
from time import time   # ‚úÖ ADD THIS
from ipwhois import IPWhois # ‚úÖ NEW

def is_host_alive(domain, port=80, timeout=2):
    try:
        with socket.create_connection((domain, port), timeout=timeout):
            return True
    except Exception:
        return False

scan_results = []  # ‚úÖ ADD THIS

# -------- SETTINGS --------
SUBDOMAINS = ["www", "mail", "ftp", "api", "test", "dev", "admin", "blog"]

def get_ports():
    choice = input ("\nüî¢ Full Scan (0-65535) or common ports only? [full/common]: ").strip().lower()
    if choice == "full":
        return list(range(1, 65536))
    else:
        return [21, 22, 23, 25, 53, 80, 110, 143, 443, 3306, 8080, 8443] 
     
# -------- IP & STATUS --------
def show_ip(domain):
    try:
        ip = socket.gethostbyname(domain)
        print(f"\nüåê Domain IP: {ip}")
        scan_results.append(f"Domain IP: {ip}") # ‚úÖ ADD THIS LINE

        # üîÅ Reverse DNS Lookup
        try:
            hostname, _, _ = socket.gethostbyaddr(ip)
            print (f"üîÅ Reverse DNS: {hostname}")
            scan_results.append(f"Reverse DNS: {hostname}")
        except:
            print("‚ö†Ô∏è Recerse DNS lookup failed")
            scan_results.append("Reverse DNS lookup failed")

    except:
        print ("‚ùå Could not resolve domain to IP")

def check_website(domain):
     try:
          r = requests.get(f"https://{domain}", timeout=3)
          print(f"\n‚úÖ  HTTPS Status: {r.status_code} - {r.reason}")
          scan_results.append(f"HTTPS Status: {r.status_code} - {r.reason}") # ‚úÖ
          print("üì• Headers:")
          scan_results.append("Headers:") # ‚úÖ

          for key, val in r.headers.items():
              print(f"  {key}: {val}")
              scan_results.append(f" {key}: {val}") # ‚úÖ
     except Exception as e:
         print(f"‚ùå Error reaching sites: {e}")

# -------- SUBDOMAIN SCANNER --------
def scan_subdomains(domain):
    print("\nüîé Subdomain scan:")
    for sub in SUBDOMAINS:
        url = f"{sub}.{domain}"
        try:
             socket.gethostbyname(url)
print(f"‚úÖ Found: {url}")
        except:
            pass  # skip failed ones

def ip_whois_lookup(domain):
    try:
        ip = socket.gethostbyname(domain)
        obj = IPWhois(ip)
        results = obj.lookup_rdap()

        print("\nüìÑ WHOIS & IP Info:")
        scan_results.append("WHOIS & IP Info:")
        scan_results.append(f"  IP: {IP}")
        print(f" IP: {ip}")

        for key in ['asn', 'asn_country_code', 'network', 'name', 'registrar', 'org']:
            val = results.get(key, 'N/A')
            print(f"  {key}: {val}")
            scan_results.append(f"  {key}: {val}")

    except Exception as e:
        print(f"‚ùå WHOIS lookup failed: {e}")
        scan_results.append(f"WHOIS lookup failed: {e}")

# -------- PORT SCANNER --------
def scan_port(domain, port):
    try:
        s = socket.socket()
        s.settimeout(1)
        result = s.connect_ex((domain, port))
        if result == 0:
            try:
                if port == 80 or port == 443:
                    request = f"HEAD / HTTP/1.1\r\nHost: {domain}\r\n\r\n"
                    s.send(request.encode())
                else:
                    s.send(b"\r\n")  # Minimal data for non-HTTP ports

                banner = s.recv(1024).decode(errors="ignore").strip()
                if not banner:
                    banner = "No banner returned"

                # Basic service fingerprinting
                services = {
                    21: "FTP", 22: "SSH", 23: "Telnet", 25: "SMTP", 53: "DNS", 80: "HTTP",
                    110: "POP3", 143: "IMAP", 443: "HTTPS", 3306: "MySQL", 8080: "HTTP-Alt", 8443: "HTTPS-Alt"
                }
                service = services.get(port, "Unknown")

                msg = f"üü¢ Port {port} is OPEN - Service: {service} - Banner: {banner.splitlines()[0] if banner else 'None'}"
                print(msg)
                scan_results.append(msg)

            except Exception as e:
                print(f"üî¥ Port {port} - Error grabbing banner: {e}")
                scan_results.append(f"Port {port} - Error grabbing banner: {e}")
        s.close()
    except:
        pass

def start_port_scan(domain, port_list):
     print("\nüîß Scanning ports:")
     threads = []
 for port in port_list:
          t = threading.Thread(target=scan_port, args=(domain, port))
          threads.append(t)
          t.start()

     for t in threads:
              t.join()

def export_to_csv(results, filename="scan_results.csv"):
    try:
        with open(filename, mode="w", newline='') as file:
            writer = csv.writer(file)
            writer.writerow(["Scan Result"]) # header row
            for item in results:
                writer.writerow([item])
        print (f"\nüìÅ CSV export complete: {filename}")
    except Exception as e:
        print(f"‚ùå  Failed to export CSV: {e}")



# -------- MAIN --------
if __name__ == "__main__":
    import threading

    targets = input("Enter domain(s) (comma separarated, eg.g. google.com, github.com): ").split(",")
    targets = [t.strip() for t in targets if t.strip()]
    start = time()  # ‚è±Ô∏è Start timer

def scan_domain(target):
    global scan_results
    scan_results = []


    port_list = get_ports()
    show_ip(target)
    ip_whois_lookup(target)
    check_website(target)
    scan_subdomains(target)
    start_port_scan(target, port_list)

    print(f"\n‚úÖ‚úÖ Scan complete for {target}")
    print(f"‚è±Ô∏è Duration: {time() - start:.2f} seconds")

        # Create scan_results folder if it doesn't exist
folder = "scan_results"
if not os.path.exists(folder):
    os.makedirs(folder)

threads = []
for target in targets:
    if not is_host_alive(target):
        print(f"‚ùå Host {target} is unreachable. Skipping.")
        continue

    filename = os.path.join(folder, f"{target.replace('.', '_')}_scan_results_" + datetime.now().strftime('%Y%m%d_%H%M%S') + ".csv")
    export_to_csv(scan_results, filename)
    print(f"üìÅ Results saved to: {filename}\n")

    t = threading.Thread(target=scan_domain, args=(target,))
    t.start()
    threads.append(t)

for t in threads:
    t.join()
    
    
