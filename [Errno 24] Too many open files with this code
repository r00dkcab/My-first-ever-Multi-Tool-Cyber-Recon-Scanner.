import socket
import requests 
import threading
import dns.resolver
import csv
import os
from datetime import datetime
from time import time   # ‚úÖ ADD THIS
from ipwhois import IPWhois # ‚úÖ NEW

scan_results = []
folder = "scan_results"

def is_host_alive(domain, port=80, timeout=2):
    try:
        with socket.create_connection((domain, port), timeout=timeout):
            return True
    except Exception:
        return False

# -------- SETTINGS --------
SUBDOMAINS = ["www", "mail", "ftp", "api", "test", "dev", "admin", "blog"]

def get_ports():
    choice = input ("\nüî¢ Full Scan (0-65535) or common ports only? [full/common]: ").strip().lower()
    if choice == "full":
        return list(range(1, 65536))
    else:
        return [21, 22, 23, 25, 53, 80, 110, 143, 443, 3306, 8080, 8443] 
     
# -------- IP & STATUS --------
def show_ip(domain):
    global scan_results
    try:
        ip = socket.gethostbyname(domain)
        print(f"üåê Domain IP: {ip}")
        scan_results.append(f"Domain IP: {ip}")

        # üîÅ Reverse DNS Lookup
        try:
            hostname, _, _ = socket.gethostbyaddr(ip)
            print(f"üîÅ Reverse DNS: {hostname}")
            scan_results.append(f"Reverse DNS: {hostname}")
        except:
            print("‚ö†Ô∏è Reverse DNS lookup failed")
            scan_results.append("Reverse DNS lookup failed")

    except Exception as e:
        print(f"‚ùå Error getting IP: {e}")
        scan_results.append(f"Error getting IP for {domain}: {e}")

def check_website(domain):
    global scan_results
    try:
        response = requests.get(f"http://{domain}", timeout=5)
        print(f"üîç HTTP Status: {response.status_code}")
        scan_results.append(f"HTTP Status for {domain}: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Website check error: {e}")
        scan_results.append(f"Website check error for {domain}: {e}")

# -------- SUBDOMAIN SCANNER --------
def scan_subdomains(domain):
    print("\nüîé Subdomain scan:")
    for sub in SUBDOMAINS:
        url = f"{sub}.{domain}"
        try:
             socket.gethostbyname(url)
             print(f"‚úÖ Found: {url}")
except:
            pass  # skip failed ones

def ip_whois_lookup(domain):
    global scan_results
    try:
        ip = socket.gethostbyname(domain)
        obj = IPWhois(ip)
        results = obj.lookup_rdap()
        country = results.get("network", {}).get("country", "N/A")
        isp = results.get("network", {}).get("name", "N/A")
        print(f"üåç Country: {country}, ISP: {isp}")
        scan_results.append(f"Country: {country}, ISP: {isp}")
    except Exception as e:
        print(f"‚ùå WHOIS lookup error: {e}")
        scan_results.append(f"WHOIS lookup error for {domain}: {e}")

# -------- PORT SCANNER --------
def scan_port(domain, port):
    global scan_results
    try:
        s = socket.socket()
        s.settimeout(2)
        result = s.connect_ex((domain, port))
        if result == 0:
            s.send(b"GET / HTTP/1.1\r\nHost: %b\r\n\r\n" % domain.encode())
            banner = s.recv(1024).decode(errors="ignore").strip()

            # Basic service fingerprinting
            service = {
                21: "FTP", 22: "SSH", 23: "Telnet", 25: "SMTP", 53: "DNS",
                80: "HTTP", 110: "POP3", 143: "IMAP", 443: "HTTPS",
                3306: "MySQL", 8080: "HTTP Alt", 8443: "HTTPS Alt"
            }.get(port, "Unknown")

            print(f"[+] Port {port} OPEN | Service: {service} | Banner: {banner.splitlines()[0] if banner else 'None'}")
            scan_results.append(f"Port {port} OPEN | Service: {service} | Banner: {banner.splitlines()[0] if banner else 'None'}")

        s.close()

    except Exception as e:
        print(f"[-] Port {port} Error grabbing banner: {e}")
        scan_results.append(f"Port {port} Error grabbing banner: {e}")

def start_port_scan(domain, port_list):
     print("\nüîß Scanning ports:")
     threads = []
     for port in port_list:
          t = threading.Thread(target=scan_port, args=(domain, port))
          threads.append(t)
          t.start()

     for t in threads:
              t.join()

def export_to_csv(results, filename="scan_results.csv"):
    try:
        with open(filename, mode="w", newline='') as file:
            writer = csv.writer(file)
            writer.writerow(["Scan Result"]) # header row
            for item in results:
                writer.writerow([item])
        print (f"\nüìÅ CSV export complete: {filename}")
    except Exception as e:
        print(f"‚ùå  Failed to export CSV: {e}")
# -------- MAIN --------
if __name__ == "__main__":
    import threading

    targets = [t.strip() for t in input("Enter domain(s)... ").split(",") if t.strip()]
    start = time()  # ‚è±Ô∏è Start timer

def scan_domain(target):
    global scan_results
    scan_results = []

    port_list = get_ports()
    show_ip(target)
    ip_whois_lookup(target)
    check_website(target)
    scan_subdomains(target)
    start_port_scan(target, port_list)

    print(f"\n‚úÖ‚úÖ Scan complete for {target}")
    print(f"‚è±Ô∏è Duration: {time() - start:.2f} seconds")

        # Create scan_results folder if it doesn't exist
if not os.path.exists(folder):
    os.makedirs(folder)

threads = []
for target in targets:
    if not is_host_alive(target):
        print(f"‚ùå Host {target} is unreachable. Skipping.")
        continue

    filename = os.path.join(folder, f"{target.replace('.', '_')}_scan_results_" + datetime.now().strftime('%Y%m%d_%H%M%S') + ".csv")
    export_to_csv(scan_results, filename)
    print(f"üìÅ Results saved to: {filename}\n")

    t = threading.Thread(target=scan_domain, args=(target,))
    t.start()
    threads.append(t)

for t in threads:
    t.join()
